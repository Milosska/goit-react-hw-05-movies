{"version":3,"file":"static/js/415.e3cf05e1.chunk.js","mappings":"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","sources":["components/ButtonUp/ButtonUp.styled.jsx","components/ButtonUp/ButtonUp.jsx","components/MovieList/MovieList.styled.jsx","components/MovieList/MovieCard/MovieCard.styled.jsx","components/MovieList/MovieCard/MovieCard.jsx","components/MovieList/MovieList.jsx","pages/Home.jsx","../node_modules/react-use/esm/misc/util.js","../node_modules/react-use/esm/useEffectOnce.js","../node_modules/react-use/esm/useUnmount.js","../node_modules/react-use/esm/useRafState.js","../node_modules/react-use/esm/useWindowScroll.js"],"sourcesContent":["import { BsArrowUpCircleFill } from 'react-icons/bs';\nimport styled from 'styled-components';\n\nexport const Button = styled.button`\n  position: fixed;\n  bottom: 10px;\n  right: 30px;\n  z-index: 10;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 50px;\n  height: 50px;\n  padding: 0;\n  border-radius: 50%;\n  background-color: #ffffff;\n  border: none;\n\n  @media (min-width: 768px) {\n    bottom: 20px;\n    right: 50px;\n    width: 70px;\n    height: 70px;\n  }\n\n  @media (min-width: 1900px) {\n    width: 100px;\n    height: 100px;\n  }\n\n  &.is-hidden {\n    display: none;\n  }\n`;\n\nexport const Icon = styled(BsArrowUpCircleFill)`\n  width: 50px;\n  height: 50px;\n  color: rgb(102, 80, 165);\n\n  @media (min-width: 768px) {\n    width: 70px;\n    height: 70px;\n  }\n\n  @media (min-width: 1900px) {\n    width: 100px;\n    height: 100px;\n  }\n`;\n","import { Icon, Button } from './ButtonUp.styled';\n\nexport const ButtonUp = () => {\n  const handleClick = () => {\n    if (window.pageYOffset > 0) {\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth',\n      });\n    }\n  };\n\n  return (\n    <Button type=\"button\" onClick={handleClick}>\n      <Icon />\n    </Button>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  position: relative;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 20px;\n  padding: 0;\n  list-style: none;\n\n  @media (min-width: 1200px) {\n    gap: 50px;\n  }\n`;\n\nexport const ObserverDiv = styled.div`\n  position: absolute;\n  bottom: 80px;\n  z-index: -1;\n  width: 95%;\n  height: 350px;\n\n  @media (min-width: 768px) {\n    bottom: 60px;\n  }\n`;\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport * as placeholder from '../../../images/movie-placeholder-min.jpg';\n\nexport const Card = styled(Link)`\n  position: relative;\n  display: block;\n  width: 90vw;\n  max-height: 400px;\n  overflow: hidden;\n  padding: 10px 30px;\n\n  background-size: contain, 100% 60%;\n  background-repeat: no-repeat;\n  background-image: linear-gradient(\n      to bottom,\n      rgba(102, 80, 165, 0.5) 0%,\n      rgba(0, 0, 0, 0.6) 20%,\n      rgba(0, 0, 0, 0.95) 60%,\n      rgba(0, 0, 0, 1) 100%\n    ),\n    ${card => {\n      if (!card.bdimage) {\n        return `url(${placeholder.default})`;\n      }\n      return `url(https://image.tmdb.org/t/p/w500${card.bdimage})`;\n    }};\n\n  border-radius: 8px;\n  box-shadow: 0px 8px 12px 0px rgba(0, 0, 0, 0.25);\n\n  transform: scale(1);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  ::after {\n    position: absolute;\n    top: 95%;\n    left: 0;\n    display: inline-block;\n    content: '';\n    width: 100%;\n    height: 5px;\n    background-color: #38bbd8;\n\n    transform: translateX(-100%);\n    transition: transform 500ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  :hover,\n  :focus {\n    transform: scale(1.05);\n\n    ::after {\n      transform: translateX(0);\n    }\n  }\n\n  @media (min-width: 480px) {\n    padding: 20px 30px;\n\n    background-size: contain, 100% 100%;\n  }\n\n  @media (min-width: 768px) {\n    width: 650px;\n    height: 300px;\n    padding: 20px 30px;\n\n    background-size: contain, 80% 100%;\n    background-image: linear-gradient(\n        to right,\n        rgba(102, 80, 165, 0.5) 0%,\n        rgba(0, 0, 0, 0.6) 50%,\n        rgba(0, 0, 0, 0.95) 80%,\n        rgba(0, 0, 0, 1) 100%\n      ),\n      ${card => {\n        if (!card.bdimage) {\n          return `url(${placeholder.default})`;\n        }\n        return `url(https://image.tmdb.org/t/p/w500${card.bdimage})`;\n      }};\n  }\n\n  @media (min-width: 1200px) {\n    width: 40vw;\n    min-height: 300px;\n  }\n\n  @media (min-width: 1900px) {\n    width: 30vw;\n    min-height: 300px;\n  }\n`;\n\nexport const TextContainer = styled.div`\n  margin-top: 100px;\n\n  font-family: 'Montserrat';\n  font-weight: 500;\n  color: #ffffff;\n\n  @media (min-width: 768px) {\n    width: 50%;\n    margin-top: 0;\n    margin-left: auto;\n  }\n`;\n\nexport const Title = styled.h3`\n  margin-bottom: 5px;\n  font-weight: 700;\n  font-size: 18px;\n  text-transform: uppercase;\n\n  @media (min-width: 768px) {\n    font-size: 22px;\n  }\n`;\n\nexport const Genres = styled.p`\n  margin-bottom: 10px;\n  font-size: 14px;\n  color: rgb(195, 173, 255);\n\n  @media (min-width: 768px) {\n    font-size: 18px;\n  }\n`;\n\nexport const Description = styled.p`\n  max-height: 170px;\n  overflow: auto;\n  font-size: 14px;\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n\n  @media (min-width: 768px) {\n    font-size: 18px;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { forParseGenres } from '../../../helpers/fetchAPI';\nimport {\n  Card,\n  TextContainer,\n  Title,\n  Genres,\n  Description,\n} from './MovieCard.styled';\n\nexport const MovieCard = ({\n  genres,\n  movie: { id, title, overview, genre_ids, release_date, backdrop_path },\n}) => {\n  const location = useLocation();\n  return (\n    <Card\n      to={`/movies/${id}`}\n      state={{ from: location }}\n      bdimage={backdrop_path}\n    >\n      <TextContainer>\n        <Title>{title}</Title>\n        <Genres>\n          {release_date && <span>{`(${release_date.split('-')[0]})`}</span>}\n          {forParseGenres(genres, genre_ids)}\n        </Genres>\n        <Description>{overview}</Description>\n      </TextContainer>\n    </Card>\n  );\n};\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    overview: PropTypes.string,\n    genre_ids: PropTypes.arrayOf(PropTypes.number),\n    release_date: PropTypes.string,\n    backdrop_path: PropTypes.string,\n  }).isRequired,\n  genres: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { List, ObserverDiv } from './MovieList.styled';\nimport { MovieCard } from './MovieCard/MovieCard';\n\nexport const MovieList = ({ movies, genres, setPage }) => {\n  const observerRef = useRef();\n\n  useEffect(() => {\n    // Endless scroll\n\n    const observerElem = observerRef.current;\n\n    const observerOptions = {\n      root: null,\n      rootMargin: '0px',\n      threshold: 0.5,\n    };\n\n    let observer = new IntersectionObserver(handleScroll, observerOptions);\n\n    if (observerElem) {\n      observer.observe(observerElem);\n    }\n\n    function handleScroll(entries) {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          setPage(prevState => prevState + 1);\n          return;\n        }\n      });\n\n      window.scrollBy(0, -100);\n    }\n\n    return () => {\n      observer.unobserve(observerElem);\n    };\n  }, [setPage]);\n\n  return (\n    <>\n      <List>\n        {movies.map(movie => {\n          return (\n            <li key={movie.id}>\n              <MovieCard movie={movie} genres={genres} />\n            </li>\n          );\n        })}\n      </List>\n      <ObserverDiv ref={observerRef}></ObserverDiv>\n    </>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setPage: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useWindowScroll } from 'react-use';\nimport { fetchAPI } from '../helpers/fetchAPI';\nimport { MovieList } from '../components/MovieList/MovieList';\nimport { Loader } from '../components/Loader/Loader';\nimport { ButtonUp } from '../components/ButtonUp/ButtonUp';\n\nconst Home = ({ genres }) => {\n  const [movies, setMovies] = useState([]);\n  const [page, setPage] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const { y } = useWindowScroll();\n\n  useEffect(() => {\n    if (page === 0) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    const abortController = new AbortController();\n    fetchAPI('trends', abortController.signal, page)\n      .then(({ data: { results } }) =>\n        page === 1\n          ? setMovies([...results])\n          : setMovies(prevState => [...prevState, ...results])\n      )\n      .catch(error => console.log(error))\n      .finally(() => setIsLoading(false));\n\n    return () => {\n      abortController.abort();\n    };\n  }, [page]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {y > 500 && <ButtonUp />}\n      <MovieList movies={movies} genres={genres} setPage={setPage} />\n    </>\n  );\n};\n\nexport default Home;\n","export var noop = function () { };\nexport function on(obj) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (obj && obj.addEventListener) {\n        obj.addEventListener.apply(obj, args);\n    }\n}\nexport function off(obj) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (obj && obj.removeEventListener) {\n        obj.removeEventListener.apply(obj, args);\n    }\n}\nexport var isBrowser = typeof window !== 'undefined';\nexport var isNavigator = typeof navigator !== 'undefined';\n","import { useEffect } from 'react';\nvar useEffectOnce = function (effect) {\n    useEffect(effect, []);\n};\nexport default useEffectOnce;\n","import { useRef } from 'react';\nimport useEffectOnce from './useEffectOnce';\nvar useUnmount = function (fn) {\n    var fnRef = useRef(fn);\n    // update the ref each render so if it change the newest callback will be invoked\n    fnRef.current = fn;\n    useEffectOnce(function () { return function () { return fnRef.current(); }; });\n};\nexport default useUnmount;\n","import { useCallback, useRef, useState } from 'react';\nimport useUnmount from './useUnmount';\nvar useRafState = function (initialState) {\n    var frame = useRef(0);\n    var _a = useState(initialState), state = _a[0], setState = _a[1];\n    var setRafState = useCallback(function (value) {\n        cancelAnimationFrame(frame.current);\n        frame.current = requestAnimationFrame(function () {\n            setState(value);\n        });\n    }, []);\n    useUnmount(function () {\n        cancelAnimationFrame(frame.current);\n    });\n    return [state, setRafState];\n};\nexport default useRafState;\n","import { useEffect } from 'react';\nimport { isBrowser, off, on } from './misc/util';\nimport useRafState from './useRafState';\nvar useWindowScroll = function () {\n    var _a = useRafState(function () { return ({\n        x: isBrowser ? window.pageXOffset : 0,\n        y: isBrowser ? window.pageYOffset : 0,\n    }); }), state = _a[0], setState = _a[1];\n    useEffect(function () {\n        var handler = function () {\n            setState(function (state) {\n                var pageXOffset = window.pageXOffset, pageYOffset = window.pageYOffset;\n                //Check state for change, return same state if no change happened to prevent rerender\n                //(see useState/setState documentation). useState/setState is used internally in useRafState/setState.\n                return state.x !== pageXOffset || state.y !== pageYOffset\n                    ? {\n                        x: pageXOffset,\n                        y: pageYOffset,\n                    }\n                    : state;\n            });\n        };\n        //We have to update window scroll at mount, before subscription.\n        //Window scroll may be changed between render and effect handler.\n        handler();\n        on(window, 'scroll', handler, {\n            capture: false,\n            passive: true,\n        });\n        return function () {\n            off(window, 'scroll', handler);\n        };\n    }, []);\n    return state;\n};\nexport default useWindowScroll;\n"],"names":["Button","styled","Icon","BsArrowUpCircleFill","ButtonUp","type","onClick","window","pageYOffset","scrollTo","top","behavior","List","ObserverDiv","Card","Link","card","bdimage","placeholder","TextContainer","Title","Genres","Description","MovieCard","genres","movie","id","title","overview","genre_ids","release_date","backdrop_path","location","useLocation","to","state","from","split","forParseGenres","MovieList","movies","setPage","observerRef","useRef","useEffect","observerElem","current","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","prevState","scrollBy","root","rootMargin","threshold","observe","unobserve","map","ref","useState","setMovies","page","isLoading","setIsLoading","y","useWindowScroll","abortController","AbortController","fetchAPI","signal","then","results","data","catch","error","console","log","finally","abort","on","obj","args","_i","arguments","length","addEventListener","apply","off","removeEventListener","isBrowser","effect","fn","fnRef","useEffectOnce","initialState","frame","_a","setState","setRafState","useCallback","value","cancelAnimationFrame","requestAnimationFrame","useUnmount","useRafState","x","pageXOffset","handler","capture","passive"],"sourceRoot":""}